{
  "shebang": {
    "prefix": "shebang",
    "description": "shebang",
    "body": "#!/usr/bin/env fish"
  },
  "if operator": {
    "prefix": "if",
    "description": "if operator",
    "body": [
      "if ${1:condition}",
      "\t$0",
      "end"
    ]
  },
  "if else operator": {
    "prefix": "if-else",
    "description": "if operator",
    "body": [
      "if ${1:condition}",
      "\t${2:echo}",
      "else",
      "\t$0",
      "end"
    ]
  },
  "else operator": {
    "prefix": "else",
    "description": "else operator",
    "body": [
      "else",
      "\t$0"
    ]
  },
  "if compare with comparison operator": {
    "prefix": "if-compare",
    "description": "if operator",
    "body": [
      "if test ${1:first} ${2|=,!=,-eq,-ne,-gt,-ge,-lt,-le,-nt,-ot,-ef|} ${3:second}",
      "\t$0",
      "end"
    ]
  },
  "if else with comparison operator": {
    "prefix": "if-compare-else",
    "description": "if else operator",
    "body": [
      "if test ${1:first} ${2|=,!=,-eq,-ne,-gt,-ge,-lt,-le,-nt,-ot,-ef|} ${3:second}",
      "\t${4:echo}",
      "else",
      "\t$0",
      "end"
    ]
  },
  "while operator": {
    "prefix": "while",
    "description": "while operator",
    "body": [
      "while ${1:condition}",
      "\t$0",
      "end"
    ]
  },
  "while with comparison operator": {
    "prefix": "while-compare",
    "description": "while operator",
    "body": [
      "while test ${1:first} ${2|=,!=,-eq,-ne,-gt,-ge,-lt,-le,-nt,-ot,-ef|} ${3:second}",
      "\t$0",
      "end"
    ]
  },
  "for operator": {
    "prefix": "for",
    "description": "for operator",
    "body": [
      "for ${1:item} in ${2:collection}",
      "\t$0",
      "end"
    ]
  },
  "switch operator": {
    "prefix": "switch",
    "description": "switch operator",
    "body": [
      "switch ${1:variable}",
      "\tcase ${2:glob}",
      "\t\t${3:echo}",
      "\tcase '*'",
      "\t\t$0",
      "end"
    ]
  },
  "case operator": {
    "prefix": "case",
    "description": "case operator",
    "body": [
      "case ${1:glob}",
      "\t$0"
    ]
  },
  "function definition": {
    "prefix": "function",
    "description": "function definition",
    "body": [
      "function ${1:name}",
      "\t$0",
      "end"
    ]
  },
  "function with arguments definition": {
    "prefix": "function-arguments",
    "description": "function definition",
    "body": [
      "function ${1:name} ${2|--arguments,-a|} ${3:arguments}",
      "\t$0",
      "end"
    ]
  },
  "function with documentation definition": {
    "prefix": "function-documentation",
    "description": "function documentation",
    "body": [
      "function ${1:name} ${2|--description,-d|} ${3:description}",
      "\t$0",
      "end"
    ]
  },
  "begin end block": {
    "prefix": "begin",
    "description": "begin end block",
    "body": [
      "begin",
      "\t$0",
      "end"
    ]
  },
  "and operator": {
    "prefix": "and",
    "description": "and operator",
    "body": "${1:command}; and ${2:command}"
  },
  "or operator": {
    "prefix": "or",
    "description": "or operator",
    "body": "${1:command}; or ${2:command}"
  },
  "set builtin": {
    "prefix": "set",
    "description": "'set' invocation",
    "body": "set ${1|-l,--local,-x,--export,-g,--global,-U,--universal,-u,--unexport,--path,--unpath,-f,--function|} ${2:variable} ${3:value}"
  },
  "string builtin": {
    "prefix": "string",
    "description": "'string' invocation",
    "body": "string ${1|collect,escape,join,join0,length,lower,match,pad,repeat,replace,split,split0,sub,trim,unescape,upper|} ${2:\\$variable}"
  },
  "test builtin": {
    "prefix": "test",
    "description": "'test' invocation",
    "body": "test ${1:\\$value1} ${2|==,!=,-eq,-ne,-gt,-ge,-lt,-le|} ${3:\\$value2}"
  },
  "comment": {
    "prefix": "#",
    "description": "comment",
    "body": "# ${1}"
  }
}